package com.example.loveforjava;

import android.Manifest;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.budiyev.android.codescanner.CodeScanner;
import com.budiyev.android.codescanner.CodeScannerView;
import com.budiyev.android.codescanner.DecodeCallback;
import com.google.zxing.Result;

import java.util.Map;

public class CodeScanner_activity extends AppCompatActivity {
    private CodeScanner mCodeScanner;
    private boolean mPermissionGranted;
    private static final int RC_PERMISSION = 10;
    private APIMain APIServer;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_code_scanner);

        Intent i = getIntent();
        Player p = (Player) i.getSerializableExtra("player");

        // To identify which previous activity called this class
        String previousActivity = (String) getIntent().getSerializableExtra("Previous Activity");

        CodeScannerView scannerView = findViewById(R.id.scanner_view);
        mCodeScanner = new CodeScanner(this, scannerView);
        mCodeScanner.setDecodeCallback(new DecodeCallback() {
            @Override
            public void onDecoded(@NonNull final Result result) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        if(previousActivity.equals("Login")) {
                            saveUserID(result.getText());
                        }
                        else {
                            openOtherUserPage(result.getText());
                        }
                    }
                });
                String qr_content = result.getText();
                Intent intent = new Intent(getApplicationContext(), AfterScanActivity.class);
                intent.putExtra("code", qr_content);
                intent.putExtra("PLAYER", p);
                //intent.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);
                startActivity(intent);
            }
        });
        scannerView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mCodeScanner.startPreview();
            }
        });

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (checkSelfPermission(Manifest.permission.CAMERA) !=
                    PackageManager.PERMISSION_GRANTED) {
                mPermissionGranted = false;
                requestPermissions(new String[] {Manifest.permission.CAMERA}, RC_PERMISSION);
            } else {
                mPermissionGranted = true;
            }
        } else {
            mPermissionGranted = true;
        }

    }

    public void saveUserID(String result) {
        String developerID = result.substring(0,11);
        String userID = result.substring(11);

        // Verify if this QRCode is generated by our team
        if(developerID.equals("LOVEFORJAVA")) {
            Context context = this;
            APIMain APIServer = new APIMain();
            APIServer.getPlayerInfo(userID, new ResponseCallback() {
                @Override
                public void onResponse(Map<String, Object> response) {
                    if( (Boolean) response.get("success")) {
                        SharedPreferences sharedPreferences = getSharedPreferences("Login", MODE_PRIVATE);
                        SharedPreferences.Editor Ed = sharedPreferences.edit();
                        Ed.putString("USERID", userID);
                        Ed.commit();
                        Player player = (Player) response.get("Player_obj");
                        player.printPlayer();
                        Intent intent = new Intent(context, MainActivity.class);
                        intent.putExtra("PLAYER", player);
                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
                        startActivity(intent);
                    } else {
                        Toast.makeText(context, "This account doesn't exist", Toast.LENGTH_SHORT).show();
                        Intent intent = new Intent(context, LoginActivity.class);
                        startActivity(intent);
                    }
                }
            });
        } else {
            Toast.makeText(this, "Invalid Player QR Code", Toast.LENGTH_SHORT).show();
            Intent intent = new Intent(this, LoginActivity.class);
            startActivity(intent);
        }
    }

    public void openOtherUserPage(String result) {
        String developerID = result.substring(0,11);
        String userID = result.substring(11);

        // Verify if this QRCode is generated by our team
        if(developerID.equals("LOVEFORJAVA")) {
            APIServer = new APIMain();
            APIServer.getPlayerInfo(userID, new ResponseCallback() {
                @Override
                public void onResponse(Map<String, Object> response) {
                    if ((Boolean) response.get("success")) {
                        Player player = (Player) response.get("Player_obj");
                        Intent intent = new Intent(getApplicationContext(), OtherUserActivity.class);
                        intent.putExtra("PLAYER", player);
                        startActivity(intent);
                    }
                }
            });
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
                                           @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == RC_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                mPermissionGranted = true;
                mCodeScanner.startPreview();
            } else {
                mPermissionGranted = false;
            }
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        mCodeScanner.startPreview();
    }

    @Override
    protected void onPause() {
        mCodeScanner.releaseResources();
        super.onPause();
    }
}
